{
  "metadata": {
    "purpose": "Core architecture concepts, relationships, and knowledge graph",
    "version": "2.0.0",
    "lastUpdated": "2025-01-14"
  },
  "conceptCategories": {
    "foundational": {
      "description": "Basic architecture principles and definitions",
      "concepts": {
        "software-architecture": {
          "definition": "Structure + Characteristics + Decisions + Principles",
          "components": ["structure", "characteristics", "decisions", "principles"],
          "relationships": ["enables-quality-attributes", "guides-implementation"],
          "complexity": "beginner",
          "chapters": [1],
          "keyInsights": [
            "Architecture is more than just structure",
            "Decisions and principles are first-class citizens",
            "Quality attributes drive architectural choices"
          ]
        },
        "architect-responsibilities": {
          "definition": "Core duties and expectations of software architects",
          "components": ["decision-making", "analysis", "communication", "governance"],
          "relationships": ["requires-technical-breadth", "involves-stakeholder-management"],
          "complexity": "beginner",
          "chapters": [1],
          "keyInsights": [
            "Guide, don't dictate implementation details",
            "Balance technical depth with breadth",
            "Politics and communication are critical skills"
          ]
        },
        "technical-breadth": {
          "definition": "Knowing reasonable amounts about wide variety of technologies",
          "components": ["knowledge-pyramid", "stuff-you-know", "stuff-you-know-you-dont-know", "stuff-you-dont-know-you-dont-know"],
          "relationships": ["enables-trade-off-analysis", "supports-decision-making"],
          "complexity": "intermediate",
          "chapters": [2],
          "keyInsights": [
            "Breadth more valuable than depth for architects",
            "Unknown unknowns are the biggest risk",
            "Continuous learning is essential"
          ]
        },
        "trade-off-analysis": {
          "definition": "Systematic evaluation of architectural alternatives",
          "components": ["benefits-analysis", "drawbacks-assessment", "context-consideration"],
          "relationships": ["requires-technical-breadth", "informs-decisions"],
          "complexity": "intermediate",
          "chapters": [2],
          "keyInsights": [
            "No right or wrong answers, only trade-offs",
            "Everything has benefits and drawbacks",
            "Context determines the best choice"
          ]
        }
      }
    },
    "structural": {
      "description": "Modularity, coupling, cohesion, and system organization",
      "concepts": {
        "modularity": {
          "definition": "Logical grouping of related code with clear boundaries",
          "components": ["cohesion", "coupling", "encapsulation", "separation-of-concerns"],
          "relationships": ["enables-maintainability", "supports-team-autonomy"],
          "complexity": "intermediate",
          "chapters": [3],
          "keyInsights": [
            "High cohesion, low coupling is ideal",
            "Physical and logical separation differ",
            "Modularity enables parallel development"
          ]
        },
        "cohesion": {
          "definition": "How closely related elements within a module are",
          "components": ["functional", "sequential", "communicational", "procedural", "temporal", "logical", "coincidental"],
          "relationships": ["inversely-related-to-coupling", "measured-by-LCOM"],
          "complexity": "advanced",
          "chapters": [3],
          "keyInsights": [
            "Functional cohesion is strongest",
            "Coincidental cohesion is weakest",
            "Higher cohesion improves maintainability"
          ]
        },
        "coupling": {
          "definition": "Degree of interdependence between modules",
          "components": ["afferent", "efferent", "data", "stamp", "control", "external", "common", "content"],
          "relationships": ["inversely-related-to-cohesion", "affects-changeability"],
          "complexity": "advanced",
          "chapters": [3],
          "keyInsights": [
            "Data coupling is preferred",
            "Content coupling is most problematic",
            "Coupling affects change propagation"
          ]
        },
        "connascence": {
          "definition": "Two components are connascent if changing one requires changing the other",
          "components": ["static", "dynamic", "strength", "locality", "degree"],
          "relationships": ["modern-coupling-metric", "guides-refactoring"],
          "complexity": "advanced",
          "chapters": [3],
          "keyInsights": [
            "Stronger forms should be converted to weaker",
            "Locality affects acceptability",
            "Degree should be minimized"
          ]
        }
      }
    },
    "qualitative": {
      "description": "Architecture characteristics and quality attributes",
      "concepts": {
        "architecture-characteristics": {
          "definition": "Operational, structural, and cross-cutting quality attributes",
          "components": ["operational", "structural", "cross-cutting", "implicit", "explicit"],
          "relationships": ["drives-architecture-decisions", "measured-by-fitness-functions"],
          "complexity": "intermediate",
          "chapters": [4, 5],
          "keyInsights": [
            "Implicit characteristics often overlooked",
            "Too many characteristics create conflict",
            "Business drivers should inform priorities"
          ]
        },
        "fitness-functions": {
          "definition": "Automated tests that verify architecture characteristics",
          "components": ["atomic", "holistic", "triggered", "continual", "static", "dynamic"],
          "relationships": ["implements-governance", "measures-characteristics"],
          "complexity": "advanced",
          "chapters": [6],
          "keyInsights": [
            "Automation prevents architectural drift",
            "Holistic tests verify system-wide properties",
            "Triggered tests catch violations early"
          ]
        },
        "architecture-quantum": {
          "definition": "Independently deployable artifact with high functional cohesion",
          "components": ["deployment-independence", "functional-cohesion", "synchronous-connascence"],
          "relationships": ["defines-system-boundaries", "enables-team-autonomy"],
          "complexity": "advanced",
          "chapters": [7],
          "keyInsights": [
            "Quantum size affects team structure",
            "Database sharing breaks quantum boundaries",
            "Synchronous calls create coupling"
          ]
        }
      }
    },
    "organizational": {
      "description": "Team dynamics, communication, and organizational factors",
      "concepts": {
        "conways-law": {
          "definition": "System design mirrors organizational communication structure",
          "components": ["team-structure", "communication-patterns", "system-boundaries"],
          "relationships": ["influences-architecture", "affects-component-design"],
          "complexity": "intermediate",
          "chapters": [8],
          "keyInsights": [
            "Team structure should align with desired architecture",
            "Communication overhead affects design decisions",
            "Inverse Conway Maneuver can reshape systems"
          ]
        },
        "domain-partitioning": {
          "definition": "Organizing components around business capabilities rather than technical layers",
          "components": ["business-capabilities", "bounded-contexts", "domain-services"],
          "relationships": ["preferred-over-technical-partitioning", "enables-team-autonomy"],
          "complexity": "intermediate",
          "chapters": [8],
          "keyInsights": [
            "Domain partitioning reduces coupling",
            "Teams can work more independently",
            "Business changes map to single components"
          ]
        }
      }
    }
  },
  "relationshipGraph": {
    "enables": {
      "technical-breadth": ["trade-off-analysis", "decision-making"],
      "modularity": ["maintainability", "team-autonomy", "parallel-development"],
      "fitness-functions": ["governance", "quality-assurance", "automated-verification"],
      "domain-partitioning": ["team-autonomy", "change-isolation", "business-alignment"]
    },
    "requires": {
      "trade-off-analysis": ["technical-breadth", "context-understanding"],
      "governance": ["fitness-functions", "measurement-strategy"],
      "component-design": ["modularity-understanding", "domain-knowledge"],
      "architecture-quantum": ["deployment-independence", "functional-cohesion"]
    },
    "conflicts": {
      "performance": ["maintainability", "security"],
      "scalability": ["consistency", "simplicity"],
      "flexibility": ["performance", "security"],
      "availability": ["consistency", "cost"]
    },
    "supports": {
      "cohesion": ["maintainability", "understandability"],
      "loose-coupling": ["changeability", "testability"],
      "encapsulation": ["security", "modularity"],
      "separation-of-concerns": ["maintainability", "reusability"]
    }
  },
  "complexityLevels": {
    "beginner": {
      "concepts": ["software-architecture", "architect-responsibilities"],
      "focusAreas": ["definitions", "basic-principles", "role-understanding"],
      "learningObjectives": ["understand-architecture-scope", "recognize-architect-duties"]
    },
    "intermediate": {
      "concepts": ["technical-breadth", "trade-off-analysis", "modularity", "architecture-characteristics"],
      "focusAreas": ["analysis-techniques", "measurement", "design-principles"],
      "learningObjectives": ["perform-trade-off-analysis", "measure-modularity", "identify-characteristics"]
    },
    "advanced": {
      "concepts": ["connascence", "fitness-functions", "architecture-quantum", "governance"],
      "focusAreas": ["advanced-metrics", "automation", "system-boundaries"],
      "learningObjectives": ["implement-governance", "design-quantum-boundaries", "automate-verification"]
    }
  }
}
